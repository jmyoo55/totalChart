{"version":3,"sources":["photos/chungA_2.png","photos/IU.png","Header.js","TotalChart.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","href","type","Component","TotalChart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","totalChart","img_src","_this2","fetch","then","res","json","setState","_this$state","map","chart","key","n","src","chungA_2","alt","num","title","artist","album","hour","App","src_Header","src_TotalChart","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yHCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sJCsBzBC,0LAlBP,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAY,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACfH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAR,UACAJ,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAR,YAGJJ,EAAAC,EAAAC,cAAA,OAAKC,UAAW,iBACZH,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOF,UAAU,eAC7BH,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SAASF,UAAW,gBAAjC,yBAZCG,sCC2INC,qBAzEX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAO,CACRC,WAAY,GACZC,QAAS,IAJET,mFAQC,IAAAU,EAAAP,KAEhBQ,MAAM,wCACDC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GACFJ,EAAKK,SAAS,CACVP,WAAYM,MAIxBH,MAAM,sCACDC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GACFJ,EAAKK,SAAS,CACVN,QAASK,uCAKhB,IAAAE,EAQyBb,KAAKI,MAA7BC,EARDQ,EAQCR,WARDQ,EAQaP,QAElB,OACIlB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,4BAGRF,EAAAC,EAAAC,cAAA,aACKe,EAAWS,IAAI,SAAAC,GAAK,OACrB3B,EAAAC,EAAAC,cAAA,MAAI0B,IAAKD,EAAME,EAAGC,IAAKC,IAAU5B,UAAU,WAAW6B,IAAI,YACtDhC,EAAAC,EAAAC,cAAA,UAAKyB,EAAME,GACX7B,EAAAC,EAAAC,cAAA,UAAKyB,EAAMM,KAEXjC,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,OAAK4B,IAAI,8GACT3B,UAAU,cAAc6B,IAAI,iBAC5BhC,EAAAC,EAAAC,cAAA,UAAKyB,EAAMO,OACXlC,EAAAC,EAAAC,cAAA,UAAKyB,EAAMQ,QACXnC,EAAAC,EAAAC,cAAA,UAAKyB,EAAMS,OACXpC,EAAAC,EAAAC,cAAA,UAAKyB,EAAMU,SAZnB,cApDK/B,cChDVgC,0LATX,OACEtC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACqC,EAAD,MACAvC,EAAAC,EAAAC,cAACsC,EAAD,cANYlC,cCKEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"js/main.d90b93d8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"media/chungA_2.a541f4b7.png\";","module.exports = __webpack_public_path__ + \"media/IU.66efc8bd.png\";","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className = \"headerSection\">\r\n                    <div className=\"logo\"></div>\r\n                    <a href=\"\">Log In</a>\r\n                    <a href=\"\">Sign Up</a>\r\n                </div>\r\n            \r\n                <div className =\"searchSection\">\r\n                    <input type=\"text\" className=\"search_bar\"/>\r\n                    <button type=\"button\" className =\"searchButton\">제출\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n//import chungA from './photos/album_chungA.png';\r\nimport chungA_2 from './photos/chungA_2.png';\r\nimport IU from './photos/IU.png';\r\n//import bigbang from './photos/bigbang.jpg';\r\n//import 윤딴딴 from './photos/윤딴딴.jpg';\r\n\r\n//var img = new Image();\r\n{/*}\r\nconst img = {\r\n    {\r\n        img_src: \"https://cdnimg.melon.co.kr/cm/album/images/102/38/711/10238711_500.jpg/melon/resize/120/quality/80/optimize\"\r\n    },\r\n    {\r\n        img_src:\"https://cdnimg.melon.co.kr/cm/album/images/102/37/420/10237420_500.jpg/melon/resize/120/quality/80/optimize\"\r\n    },\r\n    {\r\n\r\n    },\r\n\r\n}\r\n*/}\r\n{/*\r\nconst list = [\r\n    {\r\n        rank : 1,\r\n        rankgap : 0,\r\n        album_cover : '',\r\n        isImage : true,\r\n        src : chungA,\r\n        title : '벌써 12시',\r\n        artist : '청하',\r\n        album_name : '[single] 벌써 12시'\r\n    },\r\n    {\r\n        rank : 2,\r\n        rankgap : 0,\r\n        album_cover : '',\r\n        isImage : false,\r\n        src : IU,\r\n        title : '벌써 12시',\r\n        artist : '청하',\r\n        album_name : '[single] 벌써 12시'\r\n    },\r\n    {\r\n        rank : 3,\r\n        rankgap : 0,\r\n        album_cover : '',\r\n        isImage : false,\r\n        src : bigbang,\r\n        title : '벌써 12시',\r\n        artist : '청하',\r\n        album_name : '[single] 벌써 12시'\r\n    },\r\n    {\r\n        rank : 4,\r\n        rankgap : 0,\r\n        album_cover : '',\r\n        isImage : false,\r\n        src : 윤딴딴,\r\n        title : '벌써 12시',\r\n        artist : '청하',\r\n        album_name : '[single] 벌써 12시'\r\n    }\r\n  ];\r\n*/}\r\n\r\nclass TotalChart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state ={\r\n            totalChart: [],\r\n            img_src: []\r\n        }\r\n    }\r\n    \r\n    componentDidMount() {\r\n        \r\n        fetch('http://210.89.188.137:5000/api/chart')\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                this.setState({\r\n                    totalChart: json\r\n                })\r\n            });\r\n        \r\n        fetch('http://210.89.188.137:5000/api/img')\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                this.setState({\r\n                    img_src: json\r\n                })\r\n            });\r\n    }\r\n\r\n    render() {\r\n        /*\r\n        const addBackImage = {\r\n            backgroundImage: 'url(./photos/chungA_2.png)',\r\n            backgroundRepeat: 'no-repeat',\r\n            backgroundSize: '100%'   \r\n        }*/\r\n\r\n        var { totalChart, img_src } = this.state; \r\n\r\n        return (\r\n            <div>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>순위</th>\r\n                            <th>점수</th>\r\n                            <th>앨범커버</th>\r\n                            <th>제목</th>\r\n                            <th>가수</th>\r\n                            <th>앨범</th>\r\n                            <th>시간</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {totalChart.map(chart =>(\r\n                        <tr key={chart.n} src={chungA_2} className=\"chungA_2\" alt=\"chungA_2\"> \r\n                            <td>{chart.n}</td>\r\n                            <td>{chart.num}</td>\r\n                            {/*{img_src.map(img=>(*/}\r\n                            <td>{/*{list.album_cover}*/} \r\n                            <img src=\"https://cdnimg.melon.co.kr/cm/album/images/102/38/711/10238711_500.jpg/melon/resize/120/quality/80/optimize\"\r\n                            className=\"album_cover\" alt=\"album_cover\"/></td>\r\n                            <td>{chart.title}</td>\r\n                            <td>{chart.artist}</td>\r\n                            <td>{chart.album}</td>\r\n                            <td>{chart.hour}</td>\r\n                        </tr>\r\n                        ))};\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TotalChart;","import React, { Component } from 'react';\nimport  './App.css'; \nimport Header from './Header';\nimport './Header.css';\nimport TotalChart from './TotalChart';\nimport './TotalChart.css';\n\nclass App extends Component {\n  render() {\n\n    return (\n      <div>\n      <Header/>\n      <TotalChart/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}